/**********************************************************************************************************************
 *  COPYRIGHT
 *  -------------------------------------------------------------------------------------------------------------------
 *  \verbatim
 *  Copyright (c) 2010 by Vctr Informatik GmbH.                                              All rights reserved.
 *
 *                This software is copyright protected and proprietary to Vctr Informatik GmbH.
 *                Vctr Informatik GmbH grants to you only those rights as set out in the license conditions.
 *                All other rights remain with Vctr Informatik GmbH.
 *  \endverbatim
 *  -------------------------------------------------------------------------------------------------------------------
 *  FILE DESCRIPTION
 *  -------------------------------------------------------------------------------------------------------------------
 *         File:  NvM_Cfg.h
 *    Component:  MemService_AsrNvM
 *       Module:  NvM - Submodule Cfg (configuration)
 *    Generator:  -
 *
 *  Description:  Configuration Header File.
 *                Contains Public configuration data, affecting API, and which may be accessed by applications
 *  -------------------------------------------------------------------------------------------------------------------
 *  GENERATION INFORMATION
 *  -------------------------------------------------------------------------------------------------------------------
 *     Project:    EPS.ecuc
 *   Generated:  2017-03-21 11:48 am
 *    Licensee:   Hardware Dongle (6291) 
 
    This file is generated by DaVinci Configurator Pro - DAVINCICFG.EXE V4.2.2.6.
    Do not modify this file, otherwise the software may behave in unexpected way.
 *********************************************************************************************************************/

/* Do not modify the following parts. */
/* Modification is only allowed in the described parts */

/**********************************************************************************************************************
 * API CFG DEFINES
 *********************************************************************************************************************/

/* public section - to be used by NvM itself and its users */
#if (!defined NVM_CFG_H_PUBLIC)
#define NVM_CFG_H_PUBLIC

/**********************************************************************************************************************
 * API RELEVANT (PUBLIC) SECTION OF CONFIGURATION
 *********************************************************************************************************************/

/**********************************************************************************************************************
 * VERSION IDENTIFICATION
 *********************************************************************************************************************/
#define NVM_CFG_MAJOR_VERSION    (3u)
#define NVM_CFG_MINOR_VERSION    (7u)
#define NVM_CFG_PATCH_VERSION    (1u)

/**********************************************************************************************************************
 * API CFG MACROS
 *********************************************************************************************************************/

/**********************************************************************************************************************
 * NVM API TYPE INCLUDES
 *********************************************************************************************************************/

#include "Rte_Type.h"
#define NVM_RTE_INCLUDED STD_ON
#define NVM_RTE_CALLBACKS STD_ON


#include "NvM_Types.h"

/**********************************************************************************************************************
 * API CFG TYPE DEFINITIONS
 *********************************************************************************************************************/

/* Type for an the additional published parameter Compiled Configuration ID
 * (see CompiledConfigurationId in NvM.h)
 */
/* Compiled Config Id Type */
typedef union
{
    uint16 Word_u16;
    uint8  Bytes_au8[2u];
} NvM_CompiledConfigIdType;


/**********************************************************************************************************************
 * CFG COMMON PARAMETER
 *********************************************************************************************************************/

/* --------------------  DEVELOPMENT / PRODUCTION MODE -------------------- */
/* switch between Debug- or Production-Mode */
#define NVM_DEV_ERROR_DETECT /*<NVM_DEV_ERROR_DETECT/>*/ (STD_ON)

/* Preprocessor switch that is used in NvM_ReadAll() */
#define NVM_DYNAMIC_CONFIGURATION        /*<NVM_DYNAMIC_CONFIGURATION/>*/ (STD_ON)

#define NVM_API_CONFIG_CLASS_1  (1u)
#define NVM_API_CONFIG_CLASS_2  (3u)
#define NVM_API_CONFIG_CLASS_3  (7u)

#define NVM_API_CONFIG_CLASS /*<NVM_API_CONFIG_CLASS/>*/ (NVM_API_CONFIG_CLASS_3)

#define NVM_JOB_PRIORISATION /*<NVM_JOB_PRIORISATION/>*/ STD_OFF


/* define compiled Block ID */
#define NVM_COMPILED_CONFIG_ID /*<NVM_COMPILED_CONFIG_ID/>*/ (1u)

/* switch for enablinig fast mode during multi block requests */
#define NVM_DRV_MODE_SWITCH    /*<NVM_DRV_MODE_SWITCH/>*/ (STD_ON)

/* switch for enablinig polling mode and disabling notifications */
#define NVM_POLLING_MODE    /*<NVM_POLLING_MODE/>*/ (STD_ON)

/* switch for enabling the internal buffer for Crc handling */
#define NVM_CRC_INT_BUFFER /*<NVM_CRC_INT_BUFFER/>*/ (STD_ON)

/* switch that is "ON" if dataset blocks are used */
#define NVM_USE_DATASETS    /*<NVM_USE_DATASETS/>*/ (STD_ON)

/* switch that gives the user (EcuM) the possibility to time-out WriteAll cancellation */
#define NVM_KILL_WRITEALL_API   /*<NVM_KILL_WRITEALL_API/>*/ (STD_OFF)

/* NVM does not need this macro. It is intended for underlying modules,
 * relying on its existence
 */
#define NVM_DATASET_SELECTION_BITS (1u)

/* block offset for DCM blocks */
#define NVM_DCM_BLOCK_OFFSET	0x8000u

/* returns corresponding DCM BlockId of an original NVRAM Block */
#define NvM_GetDcmBlockId(MyApplBlockId)	((MyApplBlockId) | NVM_DCM_BLOCK_OFFSET)

/* BlockId's:
 * Note: The numbers of the following list must meet the configured blocks
 *       in the NvM_BlockDescriptorTable_at
 */

/* Alignment of the handles of all blocks */
/* Id 0 is reserved for multiblock calls */
#define /*<NVM_MULTIBLOCK_ID>*/MultiBlockRequest/*</NVM_MULTIBLOCK_ID>*/ (0u)
/* Id 1 is reserved for config ID  */

#define ConfigBlock (1u)

/* user defineable blocks */
/*<NVM_BLOCK_ID_CFG>*/
#define Rte_NvmBlock_Ap_AvgFricLrn_AvgFricLrnData (2)
#define Rte_NvmBlock_Ap_LrnEOT_LearnedEOT (3)
#define Rte_NvmBlock_Ap_TrqCanc_CogTrqCal (4)
#define Rte_NvmBlock_CurrParamComp_EOLNomMtrParam (5)
#define Rte_NvmBlock_TrqCmdScl_TorqueCmdSF_Uls_f32 (6)
#define NvM_NVM_BLOCK_DEM_DEPRECATED (7)
#define NVM_BLOCK_DIAGMGR_NTCSTRG (8)
#define NVM_BLOCK_CMS_EPSDEFEATS (9)
#define NVM_BLOCK_SER_VINDATA (10)
#define NVM_BLOCK_SER_SYSTEMNAME (11)
#define NVM_BLOCK_SER_REPAIRSHOPCODE_DEPRECATED (12)
#define NVM_BLOCK_SER_PROGDATE (13)
#define NVM_BLOCK_SER_SYSVERSCODEDDI (14)
#define NVM_BLOCK_SER_CUSTMEC (15)
#define NVM_BLOCK_SER_MANFTRAC (16)
#define NVM_BLOCK_SER_ENDMODELPN (17)
#define NVM_BLOCK_SER_ENDMODELPNAC (18)
#define NVM_BLOCK_SER_DATAUNIVNUMSYSID (19)
#define NVM_BLOCK_CMS_NXTRWIRSELECT (20)
#define NVM_BLOCK_CMS_NXTRMEC (21)
#define NVM_BLOCK_CMS_ECUSRLNUM (22)
#define NVM_BLOCK_CMS_EPSSRLNUM (23)
#define NVM_BLOCK_CMS_ECUHWPN (24)
#define NVM_BLOCK_CMS_NXTRMANUFSCRATCHPAD (25)
#define NVM_BLOCK_CMS_IGNCNTR (26)
#define NVM_BLOCK_STAMD_TYPEH (27)
#define NVM_BLOCK_STAMD_CLOSECHECK (28)
#define NVM_BLOCK_DIAGMGR_BLACKBOX (29)
#define NVM_BLOCK_SER_BASEMODELPN (30)
#define NVM_BLOCK_SER_BASEMODELPNAC (31)
#define NVM_BLOCK_SER_CALPRGFLAG (32)
#define Rte_NvmBlock_AbsHwPos_EOLVehCntrOffset (33)
#define Rte_NvmBlock_DigColPs_DigColPsEOL (34)
#define Rte_NvmBlock_Ap_TrqCanc_CogTrqRplComp (35)
#define NVM_BLOCK_SER_PREVREPAIRSHOPCODE_DEPRECATED (36)
#define Rte_NvmBlock_Ap_TSMit_TSMitDisableEOL (37)
#define Rte_NvmBlock_Ap_TSMit_TSMitGainLrn (38)
#define NVM_BLOCK_CMS_NXTRMECFLAG (39)
#define NVM_BLOCK_SER_SEED_SPS (40)
#define NVM_BLOCK_SER_KEY_SPS (41)
#define NVM_BLOCK_SER_SEED_CPID (42)
#define NVM_BLOCK_SER_KEY_CPID (43)
#define NVM_BLOCK_SER_SEED_NXTR (44)
#define NVM_BLOCK_SER_KEY_NXTR (45)
#define Rte_NvmBlock_VehDyn_MotPosReset (46)
#define Rte_NvmBlock_Ap_ThrmlDutyCycle_ThrmlDutyCycle_FltStVal (47)
#define Rte_NvmBlock_Sa_HwTrqArbn_EOLCh1OffsetTrimData (48)
#define Rte_NvmBlock_Sa_HwTrqArbn_EOLCh2OffsetTrimData (49)
#define Rte_NvmBlock_Sa_HwTrqCorrln_Ch1CMCLPFSv_HwNm_f32 (50)
#define Rte_NvmBlock_Sa_HwTrqCorrln_Ch2CMCLPFSv_HwNm_f32 (51)
#define NVM_BLOCK_DIAGMGR_LATCHCNTRS (52)
#define Rte_NvmBlock_Ap_CtrlPolarityBrshlss_Polarity_Cnt_Str (53)
#define Rte_NvmBlock_Sa_AnaHwTrq_AnaHwTrqScaleData (54)
#define Rte_NvmBlock_Sa_AnaHwTrq_AnaHwTrqT1T2TrimData (55)
#define Rte_NvmBlock_Sa_CmMtrCurr3Phs_CurrTempOffset3Phs (56)
#define Rte_NvmBlock_Sa_CmMtrCurr3Phs_ShCurrCal3Phs (57)
#define Rte_NvmBlock_Sa_MotMeclPosn1_MotMeclPosn1HarCompTblData_DEPRECATED (58)
#define Rte_NvmBlock_Sa_MotMeclPosn2_MotMeclPosn2HarCompTblData_DEPRECATED (59)
#define Rte_NvmBlock_Sa_MtrPos3SinCos_MtrPos3_EOLParams (60)
#define Rte_NvmBlock_Ap_MotPosnCmp_MotPosnCmpMtrPosBackEmf (61)
#define Rte_NvmBlock_Ap_SnsrOffsLrng_SnsrLrndOffs_DEPRECATED (62)
#define NVM_BLOCK_SER_ECU_ID (63)
#define NVM_BLOCK_SER_APP_NBID (64)
#define NVM_BLOCK_SER_BCID (65)
#define NVM_BLOCK_SER_SBAT (66)
#define NVM_BLOCK_CMS_MOTORVARIANT (67)
#define Rte_NvmBlock_Sa_MotMeclPosn1_MotMeclPosn1CoeffTblData (68)
#define Rte_NvmBlock_Sa_MotMeclPosn2_MotMeclPosn2CoeffTblData (69)
#define Rte_NvmBlock_TrqOvlSta_GmLoaIgnCntr_DEPRECATED (70)
#define NvM_NVM_BLOCK_DEM_DEPRECATED1 (71)
#define Rte_NvmBlock_SrlComOutput_DTCTrigSts_DEPRECATED (72)
#define Rte_NvmBlock_Ap_ActivePull_PullCmpLTComp_HwNm_f32_DEPRECATED (73)
#define NVM_BLOCK_SER_CURRENT_PREV_REPAIRSHOPCODE (74)
#define NVM_BLOCK_CMS_GETSENSORDATA_DEPRECATED (75)
#define NVM_BLOCK_CMS_GETSENSORDATA (76)
#define NvM_NVM_BLOCK_DEM (77)
#define Rte_NvmBlock_TrqOvlSta_GmLoaIgnCntr (78)
#define Rte_NvmBlock_SrlComOutput_DTCTrigSts (79)
#define Rte_NvmBlock_Ap_ActivePull_PullCmpLTComp_HwNm_f32 (80)
#define Rte_NvmBlock_Ap_SnsrOffsLrng_SnsrLrndOffs (81)
/*</NVM_BLOCK_ID_CFG>*/


/* number of defined NV blocks */
#define NVM_TOTAL_NUM_OF_NVRAM_BLOCKS   /*<NVM_TOTAL_NUM_OF_NVRAM_BLOCKS/>*/ (82u)

/* version info api switch */
#define NVM_VERSION_INFO_API            /*<NVM_VERSION_INFO_API/>*/ (STD_OFF)

/* switch to enable the ram block status api */
#define NVM_SET_RAM_BLOCK_STATUS_API    /*<NVM_SET_RAM_BLOCK_STATUS_API/>*/ (STD_ON)


/* if in Development mode, define a macro to enable State Machine checking
 * fall through errors, operating on "NO JOB" (NvM should be IDLE)
 */
#if (STD_ON == NVM_DEV_ERROR_DETECT)
    #define NVM_DEV_DETECT_FSM_ERRORS (STD_ON)    /* just for development */
#else
    #define NVM_DEV_DETECT_FSM_ERRORS (STD_OFF)   /* just for development */
#endif

/* CONST_DESCRIPTOR_TABLE contains all block relevant data,
 * including the compiled config ID
 */
#define NVM_START_SEC_CONST_DESCRIPTOR_TABLE
#include "MemMap.h"

    /* Additional published parameter because e.g. in case of validate all RAM
     * Blocks it is nice to know the number of Blocks. But take care: this number
     * of Blocks includes Block 0 and Block 1, which are the MultiBlock and the
     * Configuration Block - user Blocks start wiht index 2!
     */
    extern CONST(uint16, NVM_PUBLIC_CONST) NvM_NoOfBlockIds_t;

    /* Additional published parameter because in case of a clear EEPROM, it is
     * necessary, to write the Configuration Block containing this Compiled
     * Configuration ID to EEPROM
     */
    /* Compiled Configuration ID as defined in NvM_Cfg.c */
    extern CONST(NvM_CompiledConfigIdType, NVM_PUBLIC_CONST) NvM_CompiledConfigId_t;
#define NVM_STOP_SEC_CONST_DESCRIPTOR_TABLE
#include "MemMap.h"


/* ---- end public configuration section ---------------------------------- */

#endif /* NVM_CFG_H_PUBLIC */
/*---- End of File ---------------------------------------------------------*/
